// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // inM -> ALU
    Mux16(a=aregOut, b=inM, sel=instruction[12], out=ax);

    // AReg buildup
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aregIn);
    Register(in=aregIn, load=instruction[5], out=aregOut, out[1..15]=addressM);
    // DReg buildup
    Register(in=aluOut, load=instruction[4], out=dregOut);
    // A | M
    Mux16(a=aregOut, b=inM, sel=instruction[12], out=aOrm);

    ALU(x=ax, y=aOrm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);
    // writeM
    And(a=instruction[3], b=true, out=writeM);

    // Program counter
    And(a=ng, b=instruction[2], out=j1ng);
    And(a=zr, b=instruction[1], out=j2zr);
    // neither zr nor ng
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=nzrnng);
    // j3
    And(a=nzrnng, b=instruction[0], out=j3nzrnng);

    Or(a=j1ng, b=j2zr, out=p1);
    Or(a=j3nzrnng, b=p1, out=p0);
    Not(in=p0, out=np0);

    PC(in=aregOut, load=p0, inc=np0, reset=reset, out[1..15]=pc);
}